# Sistema de Controle de FinanÃ§as Pessoais

Um sistema web completo para gerenciamento de finanÃ§as pessoais, construÃ­do com foco em usabilidade e seguranÃ§a. Permite o registro de receitas e despesas, anexo de comprovantes, e visualizaÃ§Ã£o de um dashboard financeiro intuitivo.
---

## DescriÃ§Ã£o

Sistema desenvolvido para controle financeiro pessoal que permite aos usuÃ¡rios:
- Criar conta e fazer login de forma segura.
- Registrar receitas e despesas por categoria.
- Anexar cupons fiscais em PDF.
- Visualizar saldo atual, total de receitas e despesas.
- Consultar histÃ³rico completo de transaÃ§Ãµes.

Este projeto foi criado para oferecer uma soluÃ§Ã£o simples e eficaz para o controle financeiro pessoal. A plataforma permite que os usuÃ¡rios cadastrem-se, registrem suas transaÃ§Ãµes diÃ¡rias (receitas e despesas), e acompanhem sua saÃºde financeira atravÃ©s de um painel de controle claro e objetivo.
---

## Tecnologias Utilizadas

### Backend
- **Node.js**
- **Express.js**
- **MySQL2**
- **bcrypt** 
- **express-validator**
- **helmet**
- **express-rate-limit**
- **xss-clean** 
- **hpp**
- **multer**
- **dotenv**

### Frontend
- **React**
- **Tailwind CSS**

### Banco de Dados
- **MySQL**

##  Funcionalidades

- âœ… Cadastro e login de usuÃ¡rio.
- âœ… Adicionar receitas.
- âœ… Adicionar suas despesas pessoais.
- âœ… Upload de cupom fiscal.
- âœ… VisualizaÃ§Ã£o de saldo.
- âœ… HistÃ³rico de transaÃ§Ãµes.

---

## SeguranÃ§a

O sistema possui proteÃ§Ãµes contra as seguintes vulnerabilidades:

### 1. SQL Injection 
**ProteÃ§Ã£o:** Queries parametrizadas em 100% das consultas

### 2. Cross-Site Scripting (XSS) âœ…
**ProteÃ§Ã£o:** SanitizaÃ§Ã£o de inputs + Helmet + CSP

### 3. Cross-Site Request Forgery (CSRF) âœ…
**ProteÃ§Ã£o:** CORS restrito + ValidaÃ§Ã£o de origem

### 4. Mass Assignment âœ…
**ProteÃ§Ã£o:** Whitelist de campos permitidos

### 5. Session Hijacking âœ…
**ProteÃ§Ã£o:** Rate limiting + Bcrypt forte

### 6. Hardcoded SQL âœ…
**ProteÃ§Ã£o:** 0% de SQL hardcoded - 100% parametrizado

---

## ðŸ“¦ InstalaÃ§Ã£o

### PrÃ©-requisitos
1. **Node.js**
2. **XAMPP**

### Passo 1: Configurar Banco de Dados

1. Inicie o **XAMPP** e ligue o **MySQL**
2. Acesse http://localhost/phpmyadmin
3. Crie o banco `bd_fintech`
4. Execute o script `database.sql`

### Passo 2: Backend

```bash
cd backend
npm install express mysql2 cors bcrypt multer express-validator helmet express-rate-limit xss-clean hpp cookie-parser dotenv
copy .env.example .env
#edita o env com as variaveis de ambiente
npm start
```

### Passo 3: Frontend

```bash
cd frontend
npm install
npm install -D tailwindcss@3.4.1 postcss autoprefixer
npm install lucide-react
npx tailwindcss init -p
npm start
```

---

## Como Executar

### Iniciar Backend
```bash
cd backend
npm start
# Servidor backend rodando em: http://localhost:3001
```

### Iniciar Frontend
```bash
cd frontend
npm start
# Servidor frontend rodando em: http://localhost:3000
```

---

## Estrutura do Projeto

```
FintechSegura/
â”œâ”€â”€ backend/
â”‚   â”œâ”€â”€ src/
â”‚   â”‚   â”œâ”€â”€ config/
â”‚   â”‚   â”‚   â””â”€â”€ database.js
â”‚   â”‚   â”œâ”€â”€ controllers/
â”‚   â”‚   â”‚   â”œâ”€â”€ authController.js
â”‚   â”‚   â”‚   â””â”€â”€ transactionController.js
â”‚   â”‚   â”œâ”€â”€ routes/
â”‚   â”‚   â”‚   â”œâ”€â”€ authRoutes.js
â”‚   â”‚   â”‚   â””â”€â”€ transactionRoutes.js
â”‚   â”‚   â”œâ”€â”€ middleware/
â”‚   â”‚   â”‚   â”œâ”€â”€ uploadMiddleware.js
â”‚   â”‚   â”‚   â”œâ”€â”€ validationMiddleware.js
â”‚   â”‚   â”‚   â””â”€â”€ securityMiddleware.js
â”‚   â”‚   â””â”€â”€ app.js
â”‚   â”œâ”€â”€ uploads/
â”‚   â”œâ”€â”€ server.js
â”‚   â”œâ”€â”€ package.json
â”‚   â””â”€â”€ .env
â”œâ”€â”€ frontend/
â”‚   â”œâ”€â”€ src/
â”‚   â”‚   â”œâ”€â”€ App.js
â”‚   â”‚   â””â”€â”€ index.css
â”‚   â””â”€â”€ package.json
â””â”€â”€ database.sql
```

---

## ðŸ”Œ API Endpoints

### POST `/api/register`
Cadastrar usuÃ¡rio
```json
{
  "name": "JoÃ£o Silva",
  "email": "joao@email.com",
  "password": "Senha123"
}
```

### POST `/api/login`
Fazer login
```json
{
  "email": "joao@email.com",
  "password": "Senha123"
}
```

### POST `/api/transactions`
Criar transaÃ§Ã£o (multipart/form-data)

### GET `/api/transactions/:userId`
Listar transaÃ§Ãµes

### DELETE `/api/transactions/:id`
Deletar transaÃ§Ã£o

### GET `/api/stats/:userId`
Obter estatÃ­sticas
